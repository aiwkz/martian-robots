{"version":3,"sources":["utils/controllers.js","layout/Navbar/Navbar.styles.js","layout/Navbar/index.js","settings.js","layout/Instructions/Instructions.styles.js","layout/Instructions/index.js","components/Robot/robot.style.js","components/Robot/index.js","layout/Body/Body.styles.js","layout/Body/index.js","App.js","reportWebVitals.js","index.js"],"names":["degree","newOrientation","StyledNavbarContainer","styled","div","Navbar","cardinalPoints","scent","RobotOrders","robot","instructions","currentRobot","turn","orientation","direction","point","filter","toUpperCase","processMove","x","y","isLost","move","earthOrders","order","console","log","trim","substring","i","length","charAt","InstructionsContainer","InstructionsLabel","h1","InstructionsButton","input","InstructionsFailedMessage","X_BOUNDS","Y_BOUNDS","robotsList","Instructions","onRobots","useState","localInstructions","setLocalInstructions","intructionsFailed","setInstructionsFailed","robots","setRobots","useEffect","onSubmit","event","preventDefault","split","map","instruction","currentInstruction","gridBoundsDefaults","shift","updatedRobot","Number","push","e","name","onChange","target","value","rows","type","RobotsLabel","h2","Robot","BodyContainer","Body","setRobotsList","useCallback","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4d6daca.chunk.js","sourcesContent":["import { MAX_INSTRUCTION, cardinalPoints } from '../settings';\r\n\r\nlet degree;\r\nlet newOrientation;\r\nlet scent = false;\r\n\r\nconst RobotOrders = (robot, instructions) => {\r\n  let currentRobot = robot;\r\n\r\n  const turn = (orientation, direction) => {\r\n    const point = cardinalPoints.filter(point => point[0] === orientation.toUpperCase());\r\n    degree = point[0][1];\r\n\r\n    if (direction.toUpperCase() === 'R') {\r\n      degree = (degree === 270) ? degree = 0 : degree + 90;\r\n      newOrientation = cardinalPoints.filter(point => point[1] === degree);\r\n      currentRobot.orientation = newOrientation[0][0];\r\n    } else if (direction.toUpperCase() === 'L') {\r\n      degree = (degree === 0) ? degree = 270 : degree - 90;\r\n      newOrientation = cardinalPoints.filter(point => point[1] === degree);\r\n      currentRobot.orientation = newOrientation[0][0];\r\n    }\r\n    \r\n    return currentRobot.orientation;\r\n  };\r\n  \r\n  const move = () => {\r\n    switch (currentRobot.orientation.toUpperCase()) {\r\n      case 'N':\r\n        currentRobot.y = currentRobot.y + 1;\r\n      break;\r\n      case 'S':\r\n        currentRobot.y = currentRobot.y - 1;\r\n      break;\r\n      case 'E':\r\n        currentRobot.x = currentRobot.x + 1;\r\n      break;\r\n      case 'W':\r\n        currentRobot.x = currentRobot.x - 1;\r\n      break;\r\n      default:\r\n    }\r\n    \r\n    return currentRobot\r\n  };\r\n\r\n  const processMove = () => {\r\n    if (!scent) {\r\n      if  (\r\n        (currentRobot.x === 0 && currentRobot.orientation.toUpperCase() === 'W') \r\n        || (currentRobot.x === 5 && currentRobot.orientation.toUpperCase() === 'E')\r\n        || (currentRobot.y === 0 && currentRobot.orientation.toUpperCase() === 'S')\r\n        || (currentRobot.y === 3 && currentRobot.orientation.toUpperCase() === 'N')\r\n      ) {\r\n        currentRobot.isLost = true;\r\n        scent = true;\r\n        return currentRobot;\r\n      }\r\n    }\r\n\r\n    if  (\r\n      ((currentRobot.x === 0 && currentRobot.orientation.toUpperCase() === 'W') \r\n      || (currentRobot.x === 5 && currentRobot.orientation.toUpperCase() === 'E')\r\n      || (currentRobot.y === 0 && currentRobot.orientation.toUpperCase() === 'S')\r\n      || (currentRobot.y === 3 && currentRobot.orientation.toUpperCase() === 'N'))\r\n      && scent\r\n    ) {\r\n      return currentRobot;\r\n    }\r\n    \r\n    move();\r\n  }\r\n  \r\n  const earthOrders = (order) => {\r\n    switch (order) {\r\n      case 'L':\r\n        turn(currentRobot.orientation, order);\r\n        break;\r\n      case 'R':\r\n        turn(currentRobot.orientation, order);\r\n        break;\r\n      case 'F':\r\n          processMove();\r\n        break;\r\n      default:\r\n        console.log(`Invalid command received, moving to next robot.`);\r\n    }\r\n\r\n    return currentRobot.isLost;\r\n  };\r\n\r\n  const order = instructions.trim().substring(0, MAX_INSTRUCTION);\r\n\r\n  for (let i = 0; i < order.length; i++) {\r\n    if (earthOrders(order.charAt(i).toUpperCase()) === true) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return currentRobot;\r\n};\r\n\r\nexport default RobotOrders;","import styled from 'styled-components';\r\n\r\nexport const StyledNavbarContainer = styled.div`\r\n    width: auto;\r\n    padding: 0.2em 2em;\r\n    font-size: 1.3em;\r\n    background-color: #2199e8;\r\n\r\n    @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch:wght@300&display=swap');\r\n\r\n    & h1 {\r\n        font-family: 'Chakra Petch', sans-serif;\r\n    }\r\n`;","import { StyledNavbarContainer } from './Navbar.styles';\r\n\r\nconst Navbar = () => \r\n    <StyledNavbarContainer>\r\n       <h1>Martian Robots</h1>\r\n    </StyledNavbarContainer>\r\n;\r\n\r\nexport default Navbar;","export const MAX_COORD = 50;\r\nexport const MAX_INSTRUCTION = 100;\r\nexport const cardinalPoints = [['N', 0], ['E', 90], ['S', 180], ['W', 270]];","import styled from \"styled-components\";\r\n\r\nexport const InstructionsContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 20vw;\r\n    margin-right: 2rem;\r\n`;\r\n\r\nexport const InstructionsLabel = styled.h1`\r\n    margin-bottom: 1rem;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nexport const InstructionsButton = styled.input`\r\n    display: flex;\r\n    align-self: flex-end;\r\n    margin-top: 1rem;\r\n    width: max-content;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    border: 1px solid transparent;\r\n    padding: .85em 1em;\r\n    font-size: .9rem;\r\n    background-color: #2199e8;\r\n    color: #FEFEFE;\r\n`;\r\n\r\nexport const InstructionsFailedMessage = styled.div`\r\n    color: red;\r\n    margin-top: .3rem;\r\n`;\r\n","import { useEffect, useState } from \"react\";\r\nimport RobotOrders from \"../../utils/controllers\";\r\nimport { \r\n    InstructionsContainer, \r\n    InstructionsLabel,\r\n    InstructionsButton, \r\n    InstructionsFailedMessage\r\n} from \"./Instructions.styles\";\r\n\r\nlet X_BOUNDS = 5;\r\nlet Y_BOUNDS = 3;\r\nlet robotsList = [];\r\n\r\nconst Instructions = ({ onRobots }) => {\r\n    const [localInstructions, setLocalInstructions] = useState('');\r\n    const [intructionsFailed, setInstructionsFailed] = useState('');\r\n    const [robots, setRobots] = useState([]);\r\n\r\n    useEffect(() => {\r\n        onRobots && onRobots(robots);\r\n    }, [robots]);\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const instructions = localInstructions.split('\\n\\n');\r\n\r\n        return instructions.map((instruction, i) => {\r\n            const currentInstruction = instruction.split('\\n');\r\n\r\n            if (i === 0 && currentInstruction.length > 2) {\r\n                const gridBoundsDefaults = currentInstruction[0].split(' ');\r\n                gridBoundsDefaults[0] !== X_BOUNDS && (X_BOUNDS = gridBoundsDefaults[0]);\r\n                gridBoundsDefaults[1] !== Y_BOUNDS && (Y_BOUNDS = gridBoundsDefaults[1]);\r\n                currentInstruction.shift();\r\n            }\r\n\r\n            const robot = currentInstruction[0].trim().split(' ');\r\n\r\n            try {\r\n                const updatedRobot =  RobotOrders(\r\n                    { \r\n                        x: Number(robot[0]), \r\n                        y: Number(robot[1]), \r\n                        orientation: robot[2], \r\n                        isLost: false \r\n                    }, \r\n                    currentInstruction[1],\r\n                );\r\n                robotsList.push(updatedRobot);\r\n                setRobots(robotsList);\r\n                return robotsList;\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n                setInstructionsFailed('Your instructions failed.');\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <InstructionsContainer>\r\n                <InstructionsLabel>Enter instructions:</InstructionsLabel>\r\n                <textarea \r\n                    name=\"instructions\"\r\n                    onChange={(event) => setLocalInstructions(event.target.value)}\r\n                    value={localInstructions}\r\n                    rows='10'\r\n                />\r\n                <InstructionsFailedMessage>{intructionsFailed}</InstructionsFailedMessage>\r\n                <InstructionsButton type=\"submit\" value=\"Submit instructions\" />\r\n            </InstructionsContainer>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Instructions;\r\n","import styled from \"styled-components\";\r\n\r\nexport const RobotsLabel = styled.h2`\r\n    margin-bottom: 0.5rem;\r\n    font-size: 1.2rem;\r\n`;","import { RobotsLabel } from './robot.style';\r\n\r\nconst Robot = ({ robotsList }) => {\r\n    \r\n    const getRobotList = () => {\r\n        return robotsList.map(robot => (\r\n            <div>{robot.x} {robot.y} {robot.orientation} {robot.isLost && 'LOST'}</div>  \r\n        ));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <RobotsLabel>{'Robots:'}</RobotsLabel>\r\n            {getRobotList()}\r\n        </div>\r\n    );\r\n}; \r\n\r\nexport default Robot;","import styled from 'styled-components';\r\n\r\nexport const BodyContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 2rem;\r\n`;\r\n","import Instructions from \"../Instructions\";\r\nimport Robot from '../../components/Robot';\r\nimport { BodyContainer } from './Body.styles';\r\nimport { useCallback, useState } from \"react\";\r\n\r\nconst Body = () => {\r\n    const [robotsList, setRobotsList] = useState([]);\r\n\r\n    const onRobots = useCallback((robots) => {\r\n        setRobotsList(robots);\r\n    },[]);\r\n\r\n    return (\r\n        <BodyContainer >\r\n            <Instructions onRobots={onRobots} />\r\n            <Robot robotsList={robotsList} />\r\n        </BodyContainer>\r\n    );\r\n};\r\n\r\nexport default Body;\r\n","import Navbar from './layout/Navbar';\nimport Body from './layout/Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nreportWebVitals();\n"],"sourceRoot":""}